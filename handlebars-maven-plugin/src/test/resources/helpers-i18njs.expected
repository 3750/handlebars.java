(function () {
// Source: src/test/resources/i18nJs/i18njs.html

  var template = Handlebars.template(function (Handlebars,depth0,helpers,partials,data) {
  this.compilerInfo = [4,'>= 1.0.0'];
helpers = this.merge(helpers, Handlebars.helpers); data = data || {};
  var buffer = "", stack1, helper, options, functionType="function", escapeExpression=this.escapeExpression, helperMissing=helpers.helperMissing;


  if (helper = helpers.i18nJs) { stack1 = helper.call(depth0, {hash:{},data:data}); }
  else { helper = (depth0 && depth0.i18nJs); stack1 = typeof helper === functionType ? helper.call(depth0, {hash:{},data:data}) : helper; }
  buffer += escapeExpression(stack1)
    + "\n"
    + escapeExpression((helper = helpers.i18n || (depth0 && depth0.i18n),options={hash:{},data:data},helper ? helper.call(depth0, "hello", options) : helperMissing.call(depth0, "i18n", "hello", options)))
    + "\n"
    + escapeExpression((helper = helpers.i18n || (depth0 && depth0.i18n),options={hash:{},data:data},helper ? helper.call(depth0, "formatted", "Edgar!", options) : helperMissing.call(depth0, "i18n", "formatted", "Edgar!", options)))
    + "\n"
    + escapeExpression((helper = helpers.i18n || (depth0 && depth0.i18n),options={hash:{},data:data},helper ? helper.call(depth0, "args", "a", "b", "c", options) : helperMissing.call(depth0, "i18n", "args", "a", "b", "c", options)))
    + "\n";
  return buffer;
  });
  var templates = Handlebars.templates = Handlebars.templates || {};
  templates['i18njs'] = template;
  var partials = Handlebars.partials = Handlebars.partials || {};
  partials['i18njs'] = template;


// i18nJs output:
// register an empty i18nJs helper:
Handlebars.registerHelper('i18nJs', function (arguments) {
if (arguments.length > 1) {
  I18n.locale=arguments[0];
}
return '';
});

// redirect i18n helper to i18n.js:
Handlebars.registerHelper('i18n', function () {
var key = arguments[0],
  i18nOpts = {},
  len = arguments.length - 1,  options = arguments[len];
for(var i = 1; i < len; i++) {
  i18nOpts['arg' + (i - 1)] = arguments[i];
}
i18nOpts.locale = options.hash.locale;
return I18n.t(key, i18nOpts);
});



})();